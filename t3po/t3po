#!/usr/bin/python
#title          : t3po
#description    : Test runner script for Trinity
#                 Requires tap.py and sh to be installed using pip.
#author         : Hans Then
#email          : hans.then@clustervision.com

import tap
import tap.parser
import sqlite3
import logging
import argparse
import datetime
import sh
import tempfile
import os
import pwd
import subprocess
from urlparse import urlsplit

logging.basicConfig()
logger = logging.getLogger(__name__)


db = None

def cmd(*cmd):
    """Run a command and capture the output even if it fails.

       We do not use the sh module for this, since we 
       found that it would make some commands hang (e.g. rpower)."""
    logger.debug(cmd)
    p = subprocess.Popen(list(cmd), stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    for line in iter(p.stdout.readline,''):
        yield line


def connection():
    """Get a database connection."""
    logger.debug('Opening %s', db)
    return sqlite3.connect(db, 
        detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES)


def format_run(run):
    """Format a run into the header of the table"""
    date, branch, rev, _, _ = run
    s = '%s<br>%s<br>%s<br><a href="https://github.com/clustervision/trinity/commit/%s">%s</a>' \
          % (date.strftime('%Y-%m-%d'), \
             date.strftime('%H:%M:%S'), \
             branch, rev, rev[:8])
    return s


def head(list):
    if list: return next(list)


def initialize():
    """Initialize the database."""
    if os.path.exists(db):
        return
    if not os.path.exists(os.path.dirname(db)):
        os.makedirs(os.path.dirname(db))
    conn = connection()
    c = conn.cursor()
    try:
        c.execute("""CREATE TABLE test
                     (id text primary key, desc text)""")
        c.execute("""CREATE TABLE testrun
                     (run timestamp, branch text, rev text, 
                     user text, configuration text,
                     primary key(run, branch))""")
        c.execute("""CREATE TABLE testresult
                     (run timestamp, rev text, id text, result text, 
                     diagnostics text, comment text, 
                     primary key(run, rev, id))""")
    except Exception, error:
        logger.error("Unable to initialize the database: %s", error)


def parse_version(version):
    """Parse the version file"""
    version = version.split('\n')
    if len(version) < 2:
        logger.error(version)
        raise ValueError('Invalid version description')
        
    return version[0].strip().strip('*'), version[1]
        

def report(to='/var/www/html/index.html'):
    """Ugly hack to create an HTML table for the test runs
       Should be split into two steps:
       1. create a table
       2. format the table"""

    conn = connection()

    with open(to, 'w') as file:
        c = conn.cursor()
        c.execute('select * from testrun order by run, branch')
        print >>file, '<html>' 
        print >>file, '<head>'
        print >>file, '<link rel="stylesheet" type="text/css" href="t3po.css">'
        print >>file, '</head>'
        print >>file, '<body>'
        print >>file, '<table border><tr><th></th>'
        runs = []
        r = c.fetchone()
        while r:
            logger.debug(r)
            print >>file, '<th>' + format_run(r) + '</th>'
            runs.append(r[0])
            r = c.fetchone()
        print >>file, '</tr>'
        # collect test descriptions
        c.execute('select * from test order by id')
        ids = []
        r = c.fetchone()
        while r:
            logger.debug("Tests %s", r)
            ids.append((r[0], r[1]))
            r = c.fetchone()
        # collect matches between tests and runs
        for id, desc in ids:
            print >>file, '<tr>'
            print >>file, '<th class="desc">' + desc + '</th>'
            for run in runs:
                c.execute('select * from testresult where run = ? and id = ?',
                         (run, id))
                r = c.fetchone()
                if r:
                    print >>file, '<td class="%s">%s</td>' % (r[3].lower(), r[3])
                else:
                    print >>file, '<td> </td>'
            print >>file, '</tr>'
        print >>file, '</table>'
        print >>file, '</body></html>'


def run(user=None, configuration=None, tests=[], 
        to='/var/www/html/index.html'):
    """Run a set of tests"""

    now = datetime.datetime.now()
    for test in tests:
        branch, rev, stream = run_test(test)
        store_tap(branch, rev, now, user, stream)
    report(to)


def run_test(test):
    """Run an individual test file"""
    url =  urlsplit(test)

    if url.scheme and url.scheme != 'ssh':
        logger.debug("Unsupported scheme in test %s", test)

    username = url.username or pwd.getpwuid(os.getuid()).pw_name

    cmd_s = []
    if url.hostname:
        # This runs somewhere else
        cmd_s = ['ssh', '-oLogLevel=FATAL', username+'@'+url.hostname]
        if url.password:
           logger.debug("Using password %s", url.password)
           cmd_s = ['sshpass', '-p', url.password ] + cmd_s 

    version = ''.join(cmd(*cmd_s + ['cat', '/trinity/version']))
    branch, rev = parse_version(version) 
    logger.debug("version = %s %s %s", version, branch, rev) 
    return  branch, rev, cmd(*cmd_s + ['bats', url.path])


def store_tap(branch, rev, run, user, stream):
    """Store a TAP stream into the database"""
    # Add the testrun to the database
    conn = connection()
    c = conn.cursor()
    c.execute('insert or replace into testrun (run, branch, rev, user) ' + 
              'values (?,?,?,?)', \
              (run, branch, str(rev).strip(), user))
    logger.debug("%s:%s:%s:%s", run, branch, str(rev).strip(), user)
    conn.commit()

    parser = tap.parser.Parser()
    diagnostics = []
    previous = None
    for line in stream:
        print line,
        line = parser.parse_line(line)
        def write(line, diagnostics):
            if line.skip:
                # Fixme: also need to handle lines with skip reasons
                description = line.directive.text[len('skip'):].strip()
                testid = description.split('-')[0].strip()
            else:
                testid = line.description.split('-')[0].strip()
                description = line.description
            try:
                ids = testid.split('.')
                testid = '.'.join(["%02d" % (int(digit)) for digit in ids])
            except:
                logger.debug("invalid testid %s", testid)
            result = 'PASS' if line.ok else 'FAIL'
            result = 'SKIP' if line.skip else result
            diagnostics = '\n'.join(diagnostics)

            c.execute('insert or replace into test (id, desc) values (?,?)', 
                  (testid, description))

            c.execute('insert or replace into testresult ' + \
                  ' (run, rev, id, result, diagnostics) ' + \
                  'values (?,?,?,?,?)', \
                  (run, rev, testid, result, diagnostics))
            # attach the diagnostics lines
            conn.commit()
        if isinstance(line, tap.line.Result):
            if previous:
                write(previous, diagnostics)
            previous = line
            diagnostics = []
        elif isinstance(line, tap.line.Diagnostic):
            diagnostics.append(line.text)
        if previous:
            write(previous, diagnostics)
        

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run a test suite.')
    parser.add_argument('files', type=str, nargs='*',
                         help='The test files to be run')
    parser.add_argument('--log', type=str,
                         help='The loglevel')
    parser.add_argument('--db', type=str, default='/var/lib/t3po/log.db',
                         help='The database file')
    args = parser.parse_args()
    db = args.db
    initialize()

    if args.log:
        logger.setLevel(args.log)

    run(tests=args.files)
