#!/usr/bin/python

#title          : t3po
#description    : Test runner script for Trinity
#author         : Hans Then
#email          : hans.then@clustervision.com

import tap
import tap.parser
import sqlite3
import logging
import argparse
import datetime
import sh
import tempfile
import os
import subprocess
from urlparse import urlsplit

logging.basicConfig()
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)


def cmd(*cmd):
    """Run a command and capture the output even if it fails.

       We do not use the sh module for this, since we 
       found that it would make some commands hang (e.g. rpower)."""
    logger.debug(cmd)
    try:
        return subprocess.check_output(list(cmd), stderr=subprocess.STDOUT).split('\n')
    except subprocess.CalledProcessError, e:
        return e.output.split('\n')


def connection():
    """Get a database connection."""
    return sqlite3.connect('/var/lib/t3po/test_log.db', 
        detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES)


def format_run(run):
    """Format a run into the header of the table"""
    date, branch, rev, _, _ = run
    s = '%s<br>%s<br><a href="https://github.com/clustervision/trinity/commit/%s">%s</a>' \
          % (date.strftime('%Y-%m-%d'), \
            branch, rev, rev[:8])
    return s


def head(list):
    if list: return list[0]


def initialize():
    """Initialize the database."""
    if os.path.exists('/var/lib/t3po/test_log.db'):
        return
    if not os.path.exists('/var/lib/t3po/'):
        os.makedirs('/var/lib/t3po/')
    conn = connection()
    c = conn.cursor()
    try:
        c.execute('''CREATE TABLE test
                     (id text primary key, desc text)''')
        c.execute('''CREATE TABLE testrun
                     (run date, branch text, revision text, 
                      user text, configuration text,
                      primary key(run, branch))''')
        c.execute('''CREATE TABLE testresult
                     (run date, id text, result text, comment text, 
                     primary key(run, id))''')
    except Exception, error:
        logger.error("Unable to initialize the database: %s", error)

        
def report(to='/var/www/html/index.html'):
    """Ugly hack to create an HTML table for the test runs
       Should be split into two steps:
       1. create a table
       2. format the table"""

    conn = connection()

    with open(to, 'w') as file:
        c = conn.cursor()
        c.execute('select * from testrun order by run, branch')
        print >>file, '<html><body>'
        print >>file, '<table border><tr><th></th>'
        runs = []
        r = c.fetchone()
        while r:
            print >>file, '<th>' + format_run(r) + '</th>'
            runs.append(r[0])
            r = c.fetchone()
        print >>file, '</tr>'
        # collect test descriptions
        c.execute('select * from test order by id')
        ids = []
        r = c.fetchone()
        while r:
            ids.append((r[0], r[1]))
            r = c.fetchone()
        # collect matches between tests and runs
        for id, desc in ids:
            print >>file, '<tr>'
            print >>file, '<th class="desc">' + desc + '</th>'
            for run in runs:
                c.execute('select * from testresult where run = ? and id = ?',
                         (run, id))
                r = c.fetchone()
                if r:
                    print >>file, '<td class="%s">%s</td>' % (r[2].lower(), r[2])
                else:
                    print >>file, '<td> </td>'
            print >>file, '</tr>'
        print >>file, '</table>'
        print >>file, '</body></html>'


def run(branch, rev=None, user=None, configuration=None, tests=[], to='/var/www/html/index.html'):
    """Run a set of tests"""
    if not tests: 
        tests = ['/root/hans/clusterbats/master/t1.1.bats']

    # Setup the correct version on the master node
    tmpdir = '/tmp/t3po'
    if not os.path.exists(tmpdir + '/trinity'):
        if not os.path.exists(tmpdir):
            os.makedirs(tmpdir)
        os.chdir(tmpdir)
        sh.git.clone('http://github.com/clustervision/trinity')

    os.chdir(tmpdir+ '/trinity')
    # Collect branch and/or revision information
    if rev:
        sh.git.checkout(rev)
        if branch != sh.git('rev-parse', '--abbrev-ref', 'HEAD').strip():
            logger.debug("Specified revision %s is not in branch %s", 
                          revision, branch)
    else:
        sh.git.checkout(branch)
        rev = sh.git('rev-parse', 'HEAD').strip()
    sh.bash('update', 'master')

    # Write the testrun 
    date = datetime.date.today()
    conn = connection()
    c = conn.cursor()

    c.execute('insert or replace into testrun (run, branch, revision, user) ' + 
              'values (?,?,?,?)', \
              (date, branch, str(rev).strip(), user))

    conn.commit()

    for test in tests:
        stream = run_test(rev, test)
        store_tap(date, stream)
    report(to)


def run_test(rev, test):
    """Run an individual test file"""
    logger.error(test)

    url =  urlsplit(test)
    if url.scheme and url.scheme != 'ssh':
        logger.debug("Unsupported scheme in test %s", test)
    if url.hostname:
        # This runs somewhere else
        if url.password:
           logger.debug("Using password %s", url.password)
           rev_remote= head(cmd('sshpass', '-p', url.password, 'ssh', '-oLogLevel=FATAL',
                            url.username+'@'+url.hostname, 'cat /trinity/version | sed -n 2p'))
           if not rev.startswith(rev_remote):
               logger.error("Running test %s for %s on node %s which has %s", 
                             test, rev[:7], url.hostname, rev_remote)
               return []
           return cmd('sshpass', '-p', url.password, 'ssh', '-oLogLevel=FATAL',
                       url.username+'@'+url.hostname, 'bats', url.path)
        else:
           rev_remote= head(cmd('ssh', '-oLogLevel=FATAL',
                            url.username+'@'+url.hostname, 'cat /trinity/version | sed -n 2p'))
           if not rev.startswith(rev_remote):
               logger.error("Running test %s for %s on node %s which has %s", 
                             test, rev[:7], url.hostname, rev_remote)
               return []
           logger.error(rev_remote)
           return cmd('ssh', url.username+'@'+url.hostname, 
                      '-oLogLevel=FATAL', 'bats', url.path)
    return cmd('bats', url.path)


def store_tap(run, stream):
    """Store a TAP stream into the database"""
    # Add the testrun to the database
    conn = connection()
    c = conn.cursor()
    parser = tap.parser.Parser()
    for line in stream:
        print line
        line = parser.parse_line(line)
        if isinstance(line, tap.line.Result):
            if line.skip:
                description = line.directive.text[len('skip'):].strip()
                testid = description.split('-')[0].strip()
            else:
                testid = line.description.split('-')[0].strip()
                description = line.description

            try:
                ids = testid.split('.')
                testid = '.'.join(["%02d" % (int(digit)) for digit in ids])
            except:
                logger.debug("invalid testid %s", testid)
            result = 'PASS' if line.ok else 'FAIL'
            result = 'SKIP' if line.skip else result

            c.execute('insert or replace into test (id, desc) values (?,?)', 
                      (testid, description))
            if line.skip:
                try:
                    c.execute('insert into testresult (run, id, result) ' + \
                              'values (?,?,?)', \
                              (run, testid, result))
                except:
                    pass
            else:
                c.execute('insert or replace into testresult (run, id, result) ' + \
                          'values (?,?,?)', \
                          (run, testid, result))
            # FIXME:
            # attach the diagnostics lines
            conn.commit()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Run a test suite.')
    parser.add_argument('files', type=str, nargs='+',
                         help='The test files to be run')
    parser.add_argument('--branch', type=str,
                         help='The branch to be tested')
    parser.add_argument('--rev', type=str,
                         help='The revision to be tested')
    args = parser.parse_args()
    args = parser.parse_args()
    initialize()
    run(args.branch, rev=args.rev, tests=args.files)
